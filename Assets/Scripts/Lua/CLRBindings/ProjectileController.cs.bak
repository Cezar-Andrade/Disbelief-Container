using System.Collections.Generic;
using MoonSharp.Interpreter;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Lua binding to set and retrieve information for bullets in the game.
/// </summary>
public class ProjectileController : UnityEngine.Object {
    bool active = true;
    private Projectile p;
    private LuaSpriteController spr;
    private Dictionary<string, DynValue> vars = new Dictionary<string, DynValue>();

    public ProjectileController(Projectile p) {
        this.p = p;
        spr = new LuaSpriteController(p.GetComponent<Image>());
    }

    public float x { get; internal set; }
    public float y { get; internal set; }
    public float absx { get; internal set; }
    public float absy { get; internal set; }

    //Bullet.Duplicate() has been suspended because of some bugs. Maybe that I'll get on it later.
    /*private DynValue Duplicate(Transform parent, Transform current) {
        Transform[] children = UnitaleUtil.GetFirstChildren(current.gameObject.transform);
        int currentIndex = 1;
        Table table = new Table(null);
        if (current == p.transform)
            p.ctrl = this;
        //Bullet Replication
        GameObject go = GameObject.Instantiate<GameObject>(current.gameObject);
        go.transform.SetParent(parent);
        go.GetComponent<LuaProjectile>().owner = current.GetComponent<LuaProjectile>().owner;
        //Debug.Log(current.GetComponent<LuaProjectile>().ctrl);
        //go.GetComponent<LuaProjectile>().ctrl = Instantiate(current.GetComponent<LuaProjectile>().ctrl);
        //ProjectileController projectileController = new ProjectileController(go.GetComponent<Projectile>());
        //projectileController.active = current.GetComponent<LuaProjectile>().ctrl.active;
        //Debug.Log("isPersistent current " + current.GetComponent<LuaProjectile>().ctrl.isPersistent);
        //projectileController.isPersistent = current.GetComponent<LuaProjectile>().ctrl.isPersistent;
        //Debug.Log("isPersistent new " + projectileController.isPersistent);
        //projectileController.vars = current.GetComponent<LuaProjectile>().ctrl.vars;
        go.GetComponent<RectTransform>().pivot = current.GetComponent<RectTransform>().pivot;
        go.GetComponent<RectTransform>().anchorMin = current.GetComponent<RectTransform>().anchorMin;
        go.GetComponent<RectTransform>().anchorMax = current.GetComponent<RectTransform>().anchorMax;
        go.GetComponent<RectTransform>().sizeDelta = current.GetComponent<RectTransform>().sizeDelta;
        go.transform.localPosition = current.localPosition;
        go.transform.localRotation = current.localRotation;
        table.Set(currentIndex++, UserData.Create(go.GetComponent<LuaProjectile>().ctrl));
        //foreach (string key in vars.Keys)
        //    projectileController.SetVar(key, vars[key]);
        foreach (Transform tf in UnitaleUtil.GetFirstChildren(go.transform))
            Destroy(tf.gameObject);

        //Children Replication
        if (children.Length > 0)
            for (int i = 0; i < children.Length; i++) {
                DynValue tabledv = Duplicate(go.transform, children[i]);
                for (int j = 0; j < tabledv.Table.Length; j++)
                    table.Set(currentIndex++, tabledv.Table.Get(j + 1));
            }
        return DynValue.NewTable(table);
    }

    public DynValue Duplicate() {
        return Duplicate(p.transform.parent, p.transform);
    }*/

    public bool ppcollision {
        get { return p.isPP(); }
        set {
            if (!p.isPP() && value)
                p.texture = ((Texture2D)p.GetComponent<Image>().mainTexture).GetPixels32();
            p.ppcollision = value;
            p.ppchanged = true;
        }
    }

    public bool ppchanged {
        get { return p.ppchanged; }
    }

    public bool isactive {
        get { return active; }
    }

    private bool persist = false;
    public bool isPersistent {
        get { return persist; }
        set { persist = value; }
    }

    public string layer {
        get { return spr.img.transform.parent.name.Substring(0, spr.img.transform.parent.name.Length - 5); }
        set {
            Transform parent = spr.img.transform.parent;
            try { spr.img.transform.SetParent(GameObject.Find(value + "Bullet").transform); } 
            catch { spr.img.transform.SetParent(parent); }
        }
    }

    public LuaSpriteController sprite {
        get { return spr; }
    }

    public void UpdatePosition() {
        x = p.self.anchoredPosition.x - ArenaManager.arenaCenter.x;
        y = p.self.anchoredPosition.y - ArenaManager.arenaCenter.y;
        absx = p.self.anchoredPosition.x;
        absy = p.self.anchoredPosition.y;
    }

    public void ResetCollisionSystem() {
        p.ppchanged = false;
        p.ppcollision = GlobalControls.ppcollision;
    }

    public void Remove() {
        if (active) {
            Transform[] pcs = UnitaleUtil.GetFirstChildren(p.transform);
            for (int i = 1; i < pcs.Length; i++)
                pcs[i].GetComponent<ProjectileController>().Remove();
            spr.StopAnimation();
            BulletPool.instance.Requeue(p);
            Destroy(this);
        }
    }

    public void Move(float x, float y) { MoveToAbs(p.self.anchoredPosition.x + x, p.self.anchoredPosition.y + y); }

    public void MoveTo(float x, float y) { MoveToAbs(ArenaManager.arenaCenter.x + x, ArenaManager.arenaCenter.y + y); }

    public void MoveToAbs(float x, float y) {
        if (p == null)
            throw new ScriptRuntimeException("Attempted to move a removed bullet. You can use a bullet's isactive property to check if it has been removed.");
        p.self.anchoredPosition = new Vector2(x, y);
    }

    public void SendToTop() { p.self.SetAsLastSibling(); }

    public void SendToBottom() { p.self.SetAsFirstSibling(); }

    public void SetVar(string name, DynValue value) { vars[name] = value; }

    public DynValue GetVar(string name) {
        DynValue retval;
        if (vars.TryGetValue(name, out retval)) return retval;
        else                                    return DynValue.NewNil();
    }

    public DynValue this[string key] {
        get { return GetVar(key); }
        set { SetVar(key, value); }
    }

    public bool isColliding() {
        if (p.isPP())  return p.HitTestPP();
        else           return p.HitTest();
    }
}